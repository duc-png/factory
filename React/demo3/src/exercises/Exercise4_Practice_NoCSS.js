// üìö B√ÄI T·∫¨P 4 TH·ª∞C H√ÄNH: TODO APP - PURE COMPONENTS (KH√îNG CSS)
// B·∫°n h√£y code theo h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc b√™n d∆∞·ªõi

import { useState } from 'react';

/* 
üéØ M·ª§C TI√äU:
- T·∫°o Todo App ho√†n ch·ªânh v·ªõi CRUD operations
- Th·ª±c h√†nh Pure Components v·ªõi complex state
- S·ª≠ d·ª•ng useState hooks
- Event handlers v√† state management
- Local mutation trong pure components
*/

/* 
üìù B∆Ø·ªöC 1: T·∫†O COMPONENT TODOITEM (PURE COMPONENT)
Nhi·ªám v·ª•: Hi·ªÉn th·ªã 1 todo v·ªõi checkbox v√† delete button

G·ª£i √Ω:
- Nh·∫≠n props: todo, onToggle, onDelete
- Return JSX v·ªõi <li>, <input type="checkbox">, <span>, <button>
- Event handlers: onChange={()=>onToggle(todo.id)}, onClick={()=>onDelete(todo.id)}
*/

// TODO: Vi·∫øt function TodoItem ·ªü ƒë√¢y
function TodoItem({ todo, onToggle, onDelete }) {
  // TODO: Return JSX
  return (
    <li>
      {/* TODO: Checkbox ƒë·ªÉ toggle completed */}
      <input 
        type="checkbox"
        checked={todo.completed}
        onChange={() => onToggle(todo.id)}
      />
      
      {/* TODO: Text hi·ªÉn th·ªã todo (c√≥ th·ªÉ g·∫°ch ngang n·∫øu completed) */}
      <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>
        {todo.text}
      </span>
      
      {/* TODO: Delete button */}
      <button onClick={() => onDelete(todo.id)}>
        Delete
      </button>
    </li>
  );
}

/* 
üìù B∆Ø·ªöC 2: T·∫†O COMPONENT TODOLIST (PURE COMPONENT)
Nhi·ªám v·ª•: Render danh s√°ch todos ho·∫∑c empty message

G·ª£i √Ω:
- Nh·∫≠n props: todos, onToggle, onDelete
- Ki·ªÉm tra if todos.length === 0 ‚Üí return empty message
- Map qua todos v√† render TodoItem cho m·ªói todo
*/

// TODO: Vi·∫øt function TodoList ·ªü ƒë√¢y
function TodoList({ todos, onToggle, onDelete }) {
  // TODO: Ki·ªÉm tra empty state
  if (todos.length === 0) {
    return <p>No todos yet. Add some tasks!</p>;
  }
  
  // TODO: Map qua todos v√† render TodoItem
  return (
    <ul>
      {/* TODO: Map todos th√†nh TodoItem components */}
      {todos.map(todo => (
        <TodoItem 
          key={todo.id}
          todo={todo}
          onToggle={onToggle}
          onDelete={onDelete}
        />
      ))}
    </ul>
  );
}

/* 
üìù B∆Ø·ªöC 3: T·∫†O COMPONENT TODOSUMMARY (PURE COMPONENT)
Nhi·ªám v·ª•: Hi·ªÉn th·ªã th·ªëng k√™ todos

G·ª£i √Ω Local Mutation:
- T·∫°o object stats = { total: 0, completed: 0, pending: 0 }
- Loop qua todos v√† count t·ª´ng lo·∫°i
- Return JSX hi·ªÉn th·ªã stats
*/

// TODO: Vi·∫øt function TodoSummary ·ªü ƒë√¢y
function TodoSummary({ todos }) {
  // TODO: LOCAL MUTATION - T·∫°o stats object
  const stats = {
    total: 0,
    completed: 0, 
    pending: 0
  };
  
  // TODO: Loop v√† count
  for (let i = 0; i < todos.length; i++) {
    const todo = todos[i];
    stats.total += 1;
    if (todo.completed) {
      stats.completed += 1;
    } else {
      stats.pending += 1;
    }
  }
  
  // TODO: Return JSX hi·ªÉn th·ªã stats
  return (
    <div>
      <h3>üìä Todo Summary</h3>
      <p>Total: {stats.total}</p>
      <p>Completed: {stats.completed}</p>
      <p>Pending: {stats.pending}</p>
    </div>
  );
}

/* 
üìù B∆Ø·ªöC 4: T·∫†O COMPONENT APP CH√çNH (STATEFUL COMPONENT)
Nhi·ªám v·ª•: Qu·∫£n l√Ω state v√† c√°c functions

G·ª£i √Ω State Management:
- useState ƒë·ªÉ l∆∞u todos array
- useState ƒë·ªÉ l∆∞u newTodo string
- T·∫°o functions: addTodo, toggleTodo, deleteTodo
- Handle form submit
*/

// TODO: Vi·∫øt export default function
export default function TodoAppPractice() {
  // TODO: B∆Ø·ªöC 4.1 - Setup state
  const [todos, setTodos] = useState([
    // TODO: Th√™m sample data ƒë·ªÉ test
    { id: 1, text: "Learn React", completed: false },
    { id: 2, text: "Build Todo App", completed: true },
    { id: 3, text: "Master Pure Components", completed: false }
  ]);
  
  const [newTodo, setNewTodo] = useState("");
  
  // TODO: B∆Ø·ªöC 4.2 - Create functions
  const addTodo = () => {
    if (newTodo.trim() === "") return;
    
    const todo = {
      id: Date.now(), // Simple ID generation
      text: newTodo,
      completed: false
    };
    
    setTodos([...todos, todo]); // Immutable update
    setNewTodo(""); // Clear input
  };
  
  const toggleTodo = (id) => {
    // TODO: Update todo completed status
    setTodos(todos.map(todo => 
      todo.id === id 
        ? { ...todo, completed: !todo.completed }
        : todo
    ));
  };
  
  const deleteTodo = (id) => {
    // TODO: Remove todo from array
    setTodos(todos.filter(todo => todo.id !== id));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    addTodo();
  };
  
  // TODO: B∆Ø·ªöC 4.3 - Return JSX
  return (
    <div>
      <h1>üìù Todo App (No CSS Version)</h1>
      
      {/* Form ƒë·ªÉ add todo */}
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Enter new todo..."
          value={newTodo}
          onChange={(e) => setNewTodo(e.target.value)}
        />
        <button type="submit">Add Todo</button>
      </form>
      
      {/* Hi·ªÉn th·ªã todos */}
      <TodoList 
        todos={todos}
        onToggle={toggleTodo}
        onDelete={deleteTodo}
      />
      
      {/* Hi·ªÉn th·ªã summary */}
      <TodoSummary todos={todos} />
      
      {/* Th√¥ng tin demo */}
      <div style={{ marginTop: "20px", padding: "10px", border: "1px solid #ccc" }}>
        <p><strong>üéØ Pure Components Demo:</strong> TodoItem, TodoList, TodoSummary</p>
        <p>‚úÖ Same props ‚Üí Same output</p>
        <p>üîß <strong>State management:</strong> useState, immutable updates</p>
        <p>üéÆ <strong>Interactions:</strong> Add, Toggle, Delete todos</p>
      </div>
    </div>
  );
}

/* 
üî• H∆Ø·ªöNG D·∫™N TH·ª∞C H√ÄNH:

B∆Ø·ªöC 1 - TodoItem:
‚úÖ Pure component hi·ªÉn th·ªã 1 todo
‚úÖ Checkbox ƒë·ªÉ toggle completed
‚úÖ Button ƒë·ªÉ delete
‚úÖ Style conditional (line-through n·∫øu completed)

B∆Ø·ªöC 2 - TodoList:
‚úÖ Pure component hi·ªÉn th·ªã danh s√°ch
‚úÖ Empty state handling
‚úÖ Map todos th√†nh TodoItem components

B∆Ø·ªöC 3 - TodoSummary:
‚úÖ Pure component v·ªõi local mutation
‚úÖ Count total, completed, pending todos
‚úÖ Display statistics

B∆Ø·ªöC 4 - TodoAppPractice:
‚úÖ State management v·ªõi useState
‚úÖ CRUD operations (Create, Read, Update, Delete)
‚úÖ Form handling
‚úÖ Immutable state updates

üìä K·∫æT QU·∫¢ MONG MU·ªêN:
- Form ƒë·ªÉ add todo m·ªõi
- Danh s√°ch todos v·ªõi checkbox v√† delete button
- Statistics: Total/Completed/Pending
- Toggle completed status
- Delete todos
- Pure components everywhere!

üéØ SAU KHI HO√ÄN TH√ÄNH:
- S·ª≠a App.js import TodoAppPractice
- Ch·∫°y npm start ƒë·ªÉ test
- Th·ª≠ add/toggle/delete todos
- Ki·ªÉm tra pure components ho·∫°t ƒë·ªông ƒë√∫ng
*/

/* 
üí° CONCEPTS QUAN TR·ªåNG:

üü¢ PURE COMPONENTS:
- TodoItem: C√πng todo object ‚Üí C√πng JSX
- TodoList: C√πng todos array ‚Üí C√πng danh s√°ch  
- TodoSummary: C√πng todos ‚Üí C√πng statistics

üü¢ LOCAL MUTATION (trong TodoSummary):
- stats object ƒë∆∞·ª£c t·∫°o m·ªõi m·ªói render
- Safe to mutate v√¨ local scope
- Kh√¥ng ·∫£nh h∆∞·ªüng external state

üü¢ IMMUTABLE UPDATES:
- setTodos([...todos, newTodo]) // Add
- todos.map(todo => todo.id === id ? {...todo, completed: !todo.completed} : todo) // Update
- todos.filter(todo => todo.id !== id) // Delete

üü¢ EVENT HANDLERS:
- onSubmit, onChange, onClick
- Side effects trong event handlers l√† OK
- Pure components ch·ªâ pure ·ªü render function
*/
