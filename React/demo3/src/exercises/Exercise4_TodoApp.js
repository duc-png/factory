import { useState } from 'react';
import './Exercise4_TodoApp.css';

// B√†i t·∫≠p 4: To-Do App v·ªõi Pure Components
// T·∫°o ·ª©ng d·ª•ng To-Do list ho√†n ch·ªânh tu√¢n th·ªß nguy√™n t·∫Øc Pure Components

/**
 * ‚úÖ PURE COMPONENT - TodoItem
 * Nhi·ªám v·ª•: Hi·ªÉn th·ªã 1 todo item v·ªõi checkbox v√† delete button
 * Props: { todo, onToggle, onDelete }
 * T·∫°i sao pure: Same props ‚Üí Same JSX, kh√¥ng c√≥ side effects
 */
function TodoItem({ todo, onToggle, onDelete }) {
  return (
    <li className={`todo-item ${todo.completed ? 'completed' : ''}`}>
      {/* Checkbox ƒë·ªÉ toggle completed/pending */}
      <input
        type="checkbox"
        className="todo-checkbox"
        checked={todo.completed}
        onChange={() => onToggle(todo.id)} // ‚úÖ Event handler - side effects OK
      />
      
      {/* Text hi·ªÉn th·ªã v·ªõi style conditional */}
      <span className={`todo-text ${todo.completed ? 'completed' : ''}`}>
        {todo.text}
      </span>
      
      {/* Delete button */}
      <button
        className="delete-button"
        onClick={() => onDelete(todo.id)} // ‚úÖ Event handler - side effects OK
        title="Delete todo"
      >
        üóëÔ∏è Delete
      </button>
    </li>
  );
}

/**
 * ‚úÖ PURE COMPONENT - TodoList  
 * Nhi·ªám v·ª•: Render danh s√°ch todos ho·∫∑c empty state
 * Props: { todos, onToggle, onDelete }
 * T·∫°i sao pure: Ch·ªâ render d·ª±a tr√™n props, kh√¥ng thay ƒë·ªïi external data
 */
function TodoList({ todos, onToggle, onDelete }) {
  // Ki·ªÉm tra empty state
  if (todos.length === 0) {
    return (
      <div className="todo-list">
        <div className="todo-list-header">
          <h2>üìù Todo List</h2>
        </div>
        <div className="empty-state">
          <div className="empty-state-icon">üìù</div>
          <p>No todos yet. Add one above!</p>
        </div>
      </div>
    );
  }

  // Render danh s√°ch todos
  return (
    <div className="todo-list">
      <div className="todo-list-header">
        <h2>üìù Todo List ({todos.length} items)</h2>
      </div>
      <ul className="todo-items">
        {/* ‚úÖ Pure rendering: map over todos array */}
        {todos.map(todo => (
          <TodoItem
            key={todo.id} // ‚úÖ Required React key for list
            todo={todo}
            onToggle={onToggle}
            onDelete={onDelete}
          />
        ))}
      </ul>
    </div>
  );
}

/**
 * ‚úÖ PURE COMPONENT - TodoStats
 * Nhi·ªám v·ª•: T√≠nh v√† hi·ªÉn th·ªã th·ªëng k√™ todos (s·ª≠ d·ª•ng Local Mutation)
 * Props: { todos }
 * T·∫°i sao pure: Local mutation OK, same todos ‚Üí same stats
 */
function TodoStats({ todos }) {
  // ‚úÖ LOCAL MUTATION - T·∫°o object m·ªõi TRONG component
  const stats = {
    total: 0,
    completed: 0,
    pending: 0
  };

  // ‚úÖ LOCAL MUTATION - Loop v√† thay ƒë·ªïi object v·ª´a t·∫°o (OK!)
  for (let i = 0; i < todos.length; i++) {
    const todo = todos[i];
    stats.total++; // Mutation object local
    
    if (todo.completed) {
      stats.completed++; // Mutation object local
    } else {
      stats.pending++; // Mutation object local
    }
  }

  // ‚úÖ Pure calculation result
  return (
    <div className="todo-stats">
      <h2>üìä Todo Statistics</h2>
      <div className="stats-grid">
        <div className="stat-item">
          <span className="stat-number">{stats.total}</span>
          <span className="stat-label">Total</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{stats.completed}</span>
          <span className="stat-label">Completed</span>
        </div>
        <div className="stat-item">
          <span className="stat-number">{stats.pending}</span>
          <span className="stat-label">Pending</span>
        </div>
      </div>
    </div>
  );
}

/**
 * üîÑ MAIN COMPONENT - TodoApp (c√≥ state, kh√¥ng pure nh∆∞ng OK)
 * Nhi·ªám v·ª•: Qu·∫£n l√Ω state v√† event handlers cho to√†n b·ªô app
 * State: todos array, inputText string
 */
export default function TodoApp() {
  // ‚úÖ React useState hooks
  const [todos, setTodos] = useState([
    { id: 1, text: "Learn React", completed: false },
    { id: 2, text: "Build Todo App", completed: false },
    { id: 3, text: "Master Pure Components", completed: true }
  ]);
  const [inputText, setInputText] = useState('');

  /**
   * ‚úÖ EVENT HANDLER - Side effects ƒë∆∞·ª£c ph√©p ·ªü ƒë√¢y
   * Nhi·ªám v·ª•: Th√™m todo m·ªõi v√†o state
   */
  const handleAddTodo = (e) => {
    e.preventDefault(); // Prevent form submission
    
    if (inputText.trim()) { // Validate input
      // T·∫°o todo object m·ªõi
      const newTodo = {
        id: Date.now(), // Simple unique ID generation
        text: inputText.trim(),
        completed: false
      };
      
      // ‚úÖ Side effect: Update state (OK trong event handler)
      setTodos([...todos, newTodo]); // Immutable update
      setInputText(''); // Reset input
    }
  };

  /**
   * ‚úÖ EVENT HANDLER - Toggle completed status
   * Nhi·ªám v·ª•: Thay ƒë·ªïi completed c·ªßa todo c√≥ id t∆∞∆°ng ·ª©ng
   */
  const handleToggleTodo = (id) => {
    // ‚úÖ Side effect: Update state (OK trong event handler)
    setTodos(todos.map(todo =>
      todo.id === id 
        ? { ...todo, completed: !todo.completed } // Immutable update
        : todo
    ));
  };

  /**
   * ‚úÖ EVENT HANDLER - Delete todo
   * Nhi·ªám v·ª•: X√≥a todo kh·ªèi state
   */
  const handleDeleteTodo = (id) => {
    // ‚úÖ Side effect: Update state (OK trong event handler)
    setTodos(todos.filter(todo => todo.id !== id));
  };

  return (
    <div className="todo-app-container">
      <h1>‚úÖ Pure Components Todo App</h1>
      
      {/* Form ƒë·ªÉ th√™m todo m·ªõi */}
      <form className="add-todo-form" onSubmit={handleAddTodo}>
        <input
          type="text"
          className="todo-input"
          value={inputText}
          onChange={(e) => setInputText(e.target.value)} // ‚úÖ Event handler
          placeholder="Add new todo..."
        />
        <button type="submit" className="add-button">
          ‚ûï Add Todo
        </button>
      </form>

      {/* ‚úÖ S·ª≠ d·ª•ng Pure Component TodoStats */}
      <TodoStats todos={todos} />
      
      {/* ‚úÖ S·ª≠ d·ª•ng Pure Component TodoList */}
      <TodoList 
        todos={todos}
        onToggle={handleToggleTodo}
        onDelete={handleDeleteTodo}
      />
    </div>
  );
}

/**
 * üìù T√ìM T·∫ÆT PURE COMPONENTS RULES ƒê∆Ø·ª¢C √ÅP D·ª§NG:
 * 
 * ‚úÖ TodoItem: Same props ‚Üí Same JSX
 * ‚úÖ TodoList: Same todos ‚Üí Same list rendering  
 * ‚úÖ TodoStats: Same todos ‚Üí Same stats (Local Mutation OK)
 * 
 * ‚úÖ Side effects ch·ªâ trong event handlers:
 *    - handleAddTodo: setTodos, setInputText
 *    - handleToggleTodo: setTodos  
 *    - handleDeleteTodo: setTodos
 *    - onChange events: setInputText
 * 
 * ‚úÖ Local Mutation trong TodoStats:
 *    - stats object ƒë∆∞·ª£c t·∫°o M·ªöI m·ªói render
 *    - Thay ƒë·ªïi stats object kh√¥ng ·∫£nh h∆∞·ªüng b√™n ngo√†i
 *    - Pure v√¨ same todos ‚Üí same stats calculation
 * 
 * ‚úÖ Immutable Updates:
 *    - [...todos, newTodo] thay v√¨ todos.push()
 *    - todos.map() thay v√¨ todos[i] = 
 *    - todos.filter() thay v√¨ todos.splice()
 */
