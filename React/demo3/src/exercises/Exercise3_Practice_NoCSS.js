// üìö B√ÄI T·∫¨P 3 TH·ª∞C H√ÄNH: LOCAL MUTATION - SHOPPING CART (KH√îNG CSS)
// B·∫°n h√£y code theo h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc b√™n d∆∞·ªõi

/* 
üéØ M·ª§C TI√äU:
- T·∫°o Shopping Cart hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
- T√≠nh t·ªïng ti·ªÅn cho t·ª´ng s·∫£n ph·∫©m v√† to√†n b·ªô gi·ªè h√†ng
- Th·ª±c h√†nh Local Mutation (t·∫°o v√† thay ƒë·ªïi array, object trong component)
- Kh√¥ng s·ª≠ d·ª•ng CSS, ch·ªâ focus v√†o logic
*/

/* 
üìù B∆Ø·ªöC 1: T·∫†O COMPONENT PRODUCTITEM
Nhi·ªám v·ª•: Hi·ªÉn th·ªã th√¥ng tin 1 s·∫£n ph·∫©m (name, price, quantity, total)

G·ª£i √Ω:
- Nh·∫≠n props: name, price, quantity
- T√≠nh itemTotal = price * quantity
- Return JSX ƒë∆°n gi·∫£n v·ªõi <li>
*/

// TODO: Vi·∫øt function ProductItem ·ªü ƒë√¢y
function ProductItem({ name, price, quantity }) {
  // TODO: T√≠nh itemTotal
  
  // TODO: Return JSX hi·ªÉn th·ªã s·∫£n ph·∫©m
  return (
    <li>
      {/* TODO: Hi·ªÉn th·ªã name, price, quantity, itemTotal */}
    </li>
  );
}

/* 
üìù B∆Ø·ªöC 2: T·∫†O COMPONENT SHOPPINGCART
Nhi·ªám v·ª•: Hi·ªÉn th·ªã to√†n b·ªô gi·ªè h√†ng v√† t√≠nh c√°c lo·∫°i t·ªïng

G·ª£i √Ω Local Mutation:
- T·∫°o array r·ªóng: const productElements = [];
- T·∫°o object totals: { totalAmount: 0, totalItems: 0, totalQuantity: 0 }
- D√πng for loop ƒë·ªÉ duy·ªát items
- Push JSX v√†o array: productElements.push(<ProductItem />)
- C·ªông d·ªìn v√†o object totals
*/

// TODO: Vi·∫øt function ShoppingCart ·ªü ƒë√¢y
function ShoppingCart({ items }) {
  // TODO: B∆Ø·ªöC 2.1 - T·∫°o local variables
  // const productElements = [];
  // const totals = { ... };
  
  // TODO: B∆Ø·ªöC 2.2 - For loop qua items
  // for (let i = 0; i < items.length; i++) {
  //   const item = items[i];
  //   
  //   // Push JSX element
  //   productElements.push(<ProductItem key={item.id} ... />);
  //   
  //   // C·∫≠p nh·∫≠t totals
  //   totals.totalAmount += ...;
  //   totals.totalItems += ...;
  //   totals.totalQuantity += ...;
  // }
  
  // TODO: B∆Ø·ªöC 2.3 - Return JSX
  return (
    <div>
      <h2>Shopping Cart</h2>
      {/* TODO: Render productElements */}
      
      {/* TODO: Hi·ªÉn th·ªã totals */}
      <div>
        <h3>Summary:</h3>
        {/* TODO: Hi·ªÉn th·ªã totalItems, totalQuantity, totalAmount */}
      </div>
    </div>
  );
}

/* 
üìù B∆Ø·ªöC 3: T·∫†O COMPONENT APP CH√çNH
Nhi·ªám v·ª•: Cung c·∫•p d·ªØ li·ªáu v√† render ShoppingCart

G·ª£i √Ω:
- T·∫°o array cartItems v·ªõi 5 s·∫£n ph·∫©m
- M·ªói item c√≥: id, name, price, quantity
- Render ShoppingCart v·ªõi props items={cartItems}
*/

// TODO: Vi·∫øt export default function
export default function ShoppingAppPractice() {
  // TODO: B∆Ø·ªöC 3.1 - T·∫°o cartItems array
  const cartItems = [
    // TODO: Th√™m 5 s·∫£n ph·∫©m v·ªõi id, name, price, quantity
    // { id: 1, name: "Laptop", price: 999, quantity: 1 },
    // ...
  ];

  // TODO: B∆Ø·ªöC 3.2 - Return JSX
  return (
    <div>
      {/* TODO: Hi·ªÉn th·ªã title v√† ShoppingCart */}
    </div>
  );
}

/* 
üî• H∆Ø·ªöNG D·∫™N TH·ª∞C H√ÄNH:

B∆Ø·ªöC 1 - ProductItem:
‚úÖ Nh·∫≠n 3 props: name, price, quantity
‚úÖ T√≠nh itemTotal = price * quantity  
‚úÖ Return <li> hi·ªÉn th·ªã: "name - $price x quantity = $itemTotal"

B∆Ø·ªöC 2 - ShoppingCart:
‚úÖ T·∫°o productElements = []
‚úÖ T·∫°o totals = { totalAmount: 0, totalItems: 0, totalQuantity: 0 }
‚úÖ For loop qua items:
   - Push <ProductItem key={item.id} .../> v√†o productElements
   - C·ªông item.price * item.quantity v√†o totalAmount
   - C·ªông 1 v√†o totalItems
   - C·ªông item.quantity v√†o totalQuantity
‚úÖ Return JSX hi·ªÉn th·ªã productElements v√† totals

B∆Ø·ªöC 3 - ShoppingAppPractice:
‚úÖ T·∫°o cartItems v·ªõi 5 s·∫£n ph·∫©m
‚úÖ Return JSX v·ªõi <ShoppingCart items={cartItems} />

üìä K·∫æT QU·∫¢ MONG MU·ªêN:
- Hi·ªÉn th·ªã danh s√°ch 5 s·∫£n ph·∫©m
- M·ªói s·∫£n ph·∫©m hi·ªÉn th·ªã t·ªïng ti·ªÅn ri√™ng
- Cu·ªëi c√πng hi·ªÉn th·ªã t·ªïng s·ªë lo·∫°i s·∫£n ph·∫©m, t·ªïng s·ªë l∆∞·ª£ng, t·ªïng ti·ªÅn

üéØ SAU KHI HO√ÄN TH√ÄNH:
- S·ª≠a App.js import ShoppingAppPractice thay v√¨ ShoppingApp
- Ch·∫°y npm start ƒë·ªÉ test
- So s√°nh v·ªõi file Exercise3_LocalMutation.js c√≥ CSS
*/

/* 
üí° G·ª¢I √ù NHANH:

ProductItem:
const itemTotal = price * quantity;
return <li>{name} - ${price} x {quantity} = ${itemTotal}</li>;

ShoppingCart - Loop:
for (let i = 0; i < items.length; i++) {
  const item = items[i];
  productElements.push(<ProductItem key={item.id} name={item.name} price={item.price} quantity={item.quantity} />);
  totals.totalAmount += item.price * item.quantity;
  totals.totalItems += 1;
  totals.totalQuantity += item.quantity;
}

ShoppingCart - Render:
<ul>{productElements}</ul>
<p>Items: {totals.totalItems}</p>
<p>Quantity: {totals.totalQuantity}</p>
<p>Total: ${totals.totalAmount}</p>

ShoppingAppPractice - Data:
{ id: 1, name: "Laptop", price: 999, quantity: 1 }
*/
