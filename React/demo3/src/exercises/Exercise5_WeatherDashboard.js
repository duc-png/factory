import { useState } from 'react';

// B√†i t·∫≠p 5: Weather Dashboard - T·ªïng h·ª£p t·∫•t c·∫£ ki·∫øn th·ª©c
// T·∫°o ·ª©ng d·ª•ng dashboard th·ªùi ti·∫øt ho√†n ch·ªânh

// Mock data
const weatherData = {
  "Hanoi": { temp: 28, humidity: 80, condition: "Rainy" },
  "Ho Chi Minh": { temp: 32, humidity: 75, condition: "Sunny" },
  "Da Nang": { temp: 30, humidity: 70, condition: "Cloudy" },
  "Can Tho": { temp: 29, humidity: 85, condition: "Rainy" }
};

// TODO: T·∫°o pure component WeatherCard
function WeatherCard({ city, weather }) {
  // TODO:
  // 1. Hi·ªÉn th·ªã t√™n th√†nh ph·ªë
  // 2. Hi·ªÉn th·ªã nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, t√¨nh tr·∫°ng th·ªùi ti·∫øt
  // 3. T√≠nh v√† hi·ªÉn th·ªã Fahrenheit t·ª´ Celsius (local computation)
  // 4. Ch·ªçn icon/color d·ª±a tr√™n condition (local computation)
  // 5. ƒê·∫¢M B·∫¢O pure!
  
  return (
    <div>
      {/* TODO: Implement WeatherCard */}
    </div>
  );
}

// TODO: T·∫°o pure component WeatherSummary
function WeatherSummary({ cities, weatherData }) {
  // TODO:
  // 1. T√≠nh nhi·ªát ƒë·ªô trung b√¨nh c·ªßa t·∫•t c·∫£ th√†nh ph·ªë
  // 2. T√¨m th√†nh ph·ªë n√≥ng nh·∫•t, l·∫°nh nh·∫•t
  // 3. ƒê·∫øm s·ªë th√†nh ph·ªë theo t·ª´ng condition
  // 4. S·ª≠ d·ª•ng local mutation ƒë·ªÉ t√≠nh to√°n
  // 5. Component ph·∫£i pure
  
  return (
    <div>
      {/* TODO: Implement WeatherSummary */}
    </div>
  );
}

// TODO: T·∫°o pure component CitySelector
function CitySelector({ cities, selectedCities, onCityToggle }) {
  // TODO:
  // 1. Hi·ªÉn th·ªã danh s√°ch t·∫•t c·∫£ th√†nh ph·ªë
  // 2. C√≥ checkbox cho m·ªói th√†nh ph·ªë
  // 3. G·ªçi onCityToggle khi user click (event handler)
  // 4. Component ph·∫£i pure
  
  return (
    <div>
      {/* TODO: Implement CitySelector */}
    </div>
  );
}

export default function WeatherDashboard() {
  const [selectedCities, setSelectedCities] = useState(["Hanoi", "Ho Chi Minh"]);
  const allCities = Object.keys(weatherData);

  // ‚úÖ Side effects ch·ªâ trong event handlers
  const handleCityToggle = (city) => {
    // TODO: Implement toggle city logic
    console.log(`Toggling city: ${city}`); // Side effect OK ·ªü ƒë√¢y
  };

  const handleRefreshData = () => {
    // TODO: Mock refresh weather data
    console.log('Refreshing weather data...'); // Side effect OK ·ªü ƒë√¢y
    alert('Weather data refreshed!');
  };

  // TODO: Filter weather data d·ª±a tr√™n selected cities (pure computation)
  const filteredWeatherData = {};

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial' }}>
      <h1>üå§Ô∏è Weather Dashboard</h1>
      
      <button onClick={handleRefreshData} style={{ marginBottom: '20px' }}>
        üîÑ Refresh Data
      </button>

      {/* TODO: Add CitySelector component */}
      {/* TODO: Add WeatherSummary component */}
      
      <h2>Selected Cities Weather</h2>
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px' }}>
        {/* TODO: Render WeatherCard cho m·ªói selected city */}
      </div>

      {/* Debugging info */}
      <div style={{ marginTop: '20px', padding: '10px', backgroundColor: '#f0f0f0' }}>
        <h3>Debug Info:</h3>
        <p>Selected Cities: {selectedCities.join(', ')}</p>
        <p>Total Cities: {allCities.length}</p>
      </div>
    </div>
  );
}

// TODO: REQUIREMENTS CHECKLIST:
// ‚ñ° T·∫•t c·∫£ components ph·∫£i pure
// ‚ñ° Kh√¥ng c√≥ side effects trong render
// ‚ñ° S·ª≠ d·ª•ng local mutation khi c·∫ßn thi·∫øt
// ‚ñ° Side effects ch·ªâ trong event handlers
// ‚ñ° Components c√≥ th·ªÉ reuse ƒë∆∞·ª£c
// ‚ñ° Same input ‚Üí same output
// ‚ñ° Kh√¥ng thay ƒë·ªïi props/external variables
