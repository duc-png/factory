// B√†i t·∫≠p 3: Local Mutation - Shopping Cart
// T·∫°o component hi·ªÉn th·ªã gi·ªè h√†ng v·ªõi t√≠nh to√°n t·ªïng ti·ªÅn

import './Exercise3_LocalMutation.css';

function ProductItem({ name, price, quantity }) {
  const itemTotal = price * quantity;
  
  return (
    <li className="product-item">
      <div className="product-info">
        <span className="product-name">{name}</span>
        <span className="product-details">
          ${price} √ó {quantity}
        </span>
      </div>
      <span className="product-total">${itemTotal}</span>
    </li>
  );
}

function ShoppingCart({ items }) {
  // ‚úÖ LOCAL MUTATION - T·∫°o array m·ªõi trong component
  const productElements = [];
  
  // ‚úÖ LOCAL MUTATION - T·∫°o object ƒë·ªÉ t√≠nh t·ªïng
  const totals = {
    totalAmount: 0,
    totalItems: 0,
    totalQuantity: 0
  };
  
  // ‚úÖ LOCAL MUTATION - Loop v√† thay ƒë·ªïi local data
  for (let i = 0; i < items.length; i++) {
    const item = items[i];
    
    // Push JSX element v√†o array (local mutation OK)
    productElements.push(
      <ProductItem 
        key={item.id}
        name={item.name}
        price={item.price}
        quantity={item.quantity}
      />
    );
    
    // C·∫≠p nh·∫≠t totals object (local mutation OK)
    totals.totalAmount += item.price * item.quantity;
    totals.totalItems += 1;
    totals.totalQuantity += item.quantity;
  }

  return (
    <div className="shopping-cart-container">
      <div className="shopping-cart-header">
        <h2>üõí Shopping Cart</h2>
      </div>
      
      {/* Render danh s√°ch products t·ª´ array ƒë√£ t·∫°o */}
      <ul className="products-list">
        {productElements}
      </ul>
      
      {/* Hi·ªÉn th·ªã th√¥ng tin t·ªïng */}
      <div className="cart-summary">
        <h3>üìä Cart Summary</h3>
        <div className="summary-grid">
          <div className="summary-item">
            <span className="summary-label">Total Items</span>
            <span className="summary-value">{totals.totalItems}</span>
          </div>
          <div className="summary-item">
            <span className="summary-label">Total Quantity</span>
            <span className="summary-value">{totals.totalQuantity}</span>
          </div>
          <div className="summary-item total-amount">
            <span className="summary-label">Total Amount</span>
            <span className="summary-value">${totals.totalAmount}</span>
          </div>
        </div>
      </div>
    </div>
  );
}

export default function ShoppingApp() {
  const cartItems = [
    { id: 1, name: "üíª Laptop", price: 999, quantity: 1 },
    { id: 2, name: "üñ±Ô∏è Wireless Mouse", price: 25, quantity: 2 },
    { id: 3, name: "‚å®Ô∏è Mechanical Keyboard", price: 75, quantity: 1 },
    { id: 4, name: "üñ•Ô∏è 4K Monitor", price: 300, quantity: 2 },
    { id: 5, name: "üéß Headphones", price: 150, quantity: 1 }
  ];

  return (
    <div className="shopping-app-container">
      <h1>üõçÔ∏è E-commerce App</h1>
      <ShoppingCart items={cartItems} />
      
      {/* Th√¥ng tin demo - s·ª≠ d·ª•ng CSS class thay v√¨ inline style */}
      <div className="demo-info">
        <p><strong>üéØ Local Mutation Demo:</strong> Array v√† Object ƒë∆∞·ª£c t·∫°o v√† thay ƒë·ªïi TRONG component</p>
        <p>‚úÖ Pure Component - Same props ‚Üí Same result</p>
        <p>üîß <strong>K·ªπ thu·∫≠t s·ª≠ d·ª•ng:</strong> for loop, array.push(), object mutation</p>
      </div>
    </div>
  );
}
